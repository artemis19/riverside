// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VizClient is the client API for Viz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VizClient interface {
	Collect(ctx context.Context, opts ...grpc.CallOption) (Viz_CollectClient, error)
	CheckIn(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Reply, error)
}

type vizClient struct {
	cc grpc.ClientConnInterface
}

func NewVizClient(cc grpc.ClientConnInterface) VizClient {
	return &vizClient{cc}
}

func (c *vizClient) Collect(ctx context.Context, opts ...grpc.CallOption) (Viz_CollectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Viz_ServiceDesc.Streams[0], "/pb.Viz/Collect", opts...)
	if err != nil {
		return nil, err
	}
	x := &vizCollectClient{stream}
	return x, nil
}

type Viz_CollectClient interface {
	Send(*Packet) error
	CloseAndRecv() (*Reply, error)
	grpc.ClientStream
}

type vizCollectClient struct {
	grpc.ClientStream
}

func (x *vizCollectClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vizCollectClient) CloseAndRecv() (*Reply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vizClient) CheckIn(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pb.Viz/CheckIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VizServer is the server API for Viz service.
// All implementations must embed UnimplementedVizServer
// for forward compatibility
type VizServer interface {
	Collect(Viz_CollectServer) error
	CheckIn(context.Context, *Host) (*Reply, error)
	mustEmbedUnimplementedVizServer()
}

// UnimplementedVizServer must be embedded to have forward compatible implementations.
type UnimplementedVizServer struct {
}

func (UnimplementedVizServer) Collect(Viz_CollectServer) error {
	return status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedVizServer) CheckIn(context.Context, *Host) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIn not implemented")
}
func (UnimplementedVizServer) mustEmbedUnimplementedVizServer() {}

// UnsafeVizServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VizServer will
// result in compilation errors.
type UnsafeVizServer interface {
	mustEmbedUnimplementedVizServer()
}

func RegisterVizServer(s grpc.ServiceRegistrar, srv VizServer) {
	s.RegisterService(&Viz_ServiceDesc, srv)
}

func _Viz_Collect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VizServer).Collect(&vizCollectServer{stream})
}

type Viz_CollectServer interface {
	SendAndClose(*Reply) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type vizCollectServer struct {
	grpc.ServerStream
}

func (x *vizCollectServer) SendAndClose(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vizCollectServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Viz_CheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizServer).CheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Viz/CheckIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizServer).CheckIn(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

// Viz_ServiceDesc is the grpc.ServiceDesc for Viz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Viz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Viz",
	HandlerType: (*VizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIn",
			Handler:    _Viz_CheckIn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Collect",
			Handler:       _Viz_Collect_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "viz.proto",
}
